generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
}

model Student {
  id          String     @id @default(cuid()) @map("_id")
  clerkid     String 
  username    String     @unique
  name        String
  surname     String
  email       String?    @unique
  phone       String?    @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime   @default(now())
  parentId    String     @db.ObjectId
  parent      Parent     @relation(fields: [parentId], references: [id])
  classId     String     @db.ObjectId
  class       Class      @relation(fields: [classId], references: [id])
  gradeId     String     @db.ObjectId
  grade       Grade      @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  username        String         @unique
  name            String
  surname         String
  email           String?        @unique
  phone           String?        @unique
  address         String
  img             String?
  bloodType       String
  sex             UserSex
  createdAt       DateTime       @default(now())
  lessons         Lesson[]
  teacherSubjects TeacherSubject[]
  teacherClasses  TeacherClass[]
  supervisedClasses Class[] @relation("SupervisorClasses")
  birthday        DateTime
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Class {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  capacity      Int
  supervisorId  String?        @db.ObjectId
  supervisor    Teacher?       @relation("SupervisorClasses", fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       String         @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  teacherClasses TeacherClass[]
}

model Subject {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String @unique
  lessons         Lesson[]
  teacherSubjects TeacherSubject[] // New field for explicit many-to-many relation
}

// Junction model for Teacher-Subject many-to-many relationship
model TeacherSubject {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String @db.ObjectId
  subjectId String @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, subjectId])
}

// Junction model for Teacher-Class many-to-many relationship
model TeacherClass {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String @db.ObjectId
  classId   String @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  class     Class @relation(fields: [classId], references: [id])

  @@unique([teacherId, classId])
}

model Lesson {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   String       @db.ObjectId
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  String    @db.ObjectId
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  String    @db.ObjectId
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  examId       String?     @db.ObjectId
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  present   Boolean
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?  @db.ObjectId
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  classId     String?  @db.ObjectId
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}